{
  "name": "googleapis",
  "version": "0.8.0",
  "author": {
    "name": "Google Inc."
  },
  "description": "Google APIs Client Library for Node.js",
  "contributors": [
    {
      "name": "Burcu Dogan",
      "email": "jbd@google.com"
    },
    {
      "name": "Monsur Hossain",
      "email": "monsur@google.com"
    }
  ],
  "main": "./lib/googleapis",
  "repository": {
    "type": "git",
    "url": "https://github.com/google/google-api-nodejs-client.git"
  },
  "keywords": [
    "google",
    "api",
    "google apis",
    "client",
    "client library"
  ],
  "dependencies": {
    "request": "~2.34.0",
    "async": "~0.2.10",
    "gapitoken": "~0.1.2"
  },
  "devDependencies": {
    "mocha": "1.8.1",
    "url": "0.7.9"
  },
  "scripts": {
    "test": "mocha --reporter spec --timeout 4000"
  },
  "license": "Apache 2",
  "readme": "# google-api-nodejs-client [alpha]\n\n[![Build Status](https://travis-ci.org/google/google-api-nodejs-client.png)](https://travis-ci.org/google/google-api-nodejs-client)\n\n`google-api-nodejs-client` is Google's officially supported\n[node.js](http://nodejs.org/) client\nlibrary for accessing Google APIs, it also supports authorization and\nauthentication with OAuth 2.0.\n\n### Questions/problems?\n\n* Ask your development related questions on [![Ask a question on Stackoverflow](https://googledrive.com/host/0ByfSjdPVs9MZbkhjeUhMYzRTeEE/stackoveflow-tag.png)](http://stackoverflow.com/questions/tagged/google-api-nodejs-client)\n* If you found a bug, please [file a bug](https://github.com/google/google-api-nodejs-client/issues).\n\n**Note**: This library is currently in *alpha* status, meaning that we can make\nchanges in the future that *may not be compatible* with the previous versions.\n\n## Installation\n\nThe library is distributed on `npm`. In order to add it as a dependency,\nrun the following command:\n\n~~~~ sh\n$ npm install googleapis\n~~~~\n\n## Guide\n\n### Discover APIs\n\nDynamically load Google APIs and start making requests:\n\n~~~~ js\nvar googleapis = require('googleapis');\n\ngoogleapis\n    .discover('urlshortener', 'v1')\n    .discover('plus', 'v1')\n    .execute(function(err, client) {\n  if (err) {\n    console.log('Problem during the client discovery.', err);\n    return;\n  }\n  var params = { shortUrl: 'http://goo.gl/DdUKX' };\n  var getUrlReq = client.urlshortener.url.get(params);\n\n  getUrlReq.execute(function (err, response) {\n    console.log('Long url is', response.longUrl);\n  });\n\n  var getUserReq = client.plus.people.get({ userId: '+burcudogan' });\n\n  getUserReq.execute(function(err, user) {\n    console.log('User id is: ' + user.id);\n  });\n});\n~~~~\n\nSupported APIs are listed on\n[Google APIs Explorer](https://developers.google.com/apis-explorer).\n\n#### Discovery Document Caching\n\nDiscovery documents are being cached for 5 minutes locally.\nYou can configure the directory used to store cached discovery\nfiles by using the `cache.path` option.\n\n~~~~ js\ngoogleapis\n    .discover('plus', 'v3')\n    .withOpts({ cache: { path: '<path>' }))\n    .execute();\n~~~~\n\n### Authorization and Authentication\n\nThis client comes with an OAuth2 client that allows you to retrieve an access token and\nrefreshes the token and re-try the request seamlessly if token is expired. The\nbasics of Google's OAuth 2.0 implementation is explained on\n[Google Authorization and Authentication\ndocumentation](https://developers.google.com/accounts/docs/OAuth2Login).\n\nA complete sample application that authorizes and authenticates with OAuth2.0\nclient is available at `examples/oauth2.js`.\n\n#### Consent Page Url\n\nIn order to ask for permissions from a user to retrieve an access token, you\nshould redirect them to a consent page. In order to create a consent page\nURL:\n\n~~~~ js\nvar googleapis = require('googleapis'),\n    OAuth2 = googleapis.auth.OAuth2;\n\nvar oauth2Client =\n    new OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);\n\n// generates a url that allows offline access and asks permissions\n// for Google+ scope.\nvar scopes = [\n  'https://www.googleapis.com/auth/plus.me',\n  'https://www.googleapis.com/auth/calendar'\n];\n\nvar url = oauth2Client.generateAuthUrl({\n  access_type: 'offline',\n  scope: scopes.join(\" \") // space delimited string of scopes\n});\n~~~~\n\n#### Retrieving Tokens\nOnce a user has given permissions on the consent page, Google will redirect\nthe page to the redirect url you have provided with a code query parameter.\n\n    GET /oauthcallback?code={authorizationCode}\n\nWith the code returned, you can ask for an access token as shown below:\n\n~~~~ js\noauth2Client.getToken(code, function(err, tokens) {\n  // contains an access_token and optionally a refresh_token.\n  // save them permanently.\n});\n~~~~\n\n### API Client\n\nClient libraries are generated during runtime by metadata provided by Google\nAPIs Discovery Service. Metadata provided by Discovery Service is cached,\nand won't be requested each time you load a client. Below, there is an\nexample of loading a client for\n[URL Shortener API](https://developers.google.com/url-shortener/).\n\n~~~~ js\ngoogleapis\n    .discover('urlshortener', 'v1')\n    .execute(function(err, client) {\n  // handle discovery errors\n  // make requests\n});\n~~~~\n\n### Requests\n\nThe following sample loads a client for URL Shortener and retrieves the long url\nof the given short url:\n\n~~~~ js\ngoogleapis\n    .discover('urlshortener', 'v1')\n    .execute(function(err, client) {\n  // handle discovery errors\n  client.urlshortener.url.get({ shortUrl: 'http://goo.gl/DdUKX' })\n      .execute(function(err, result) {\n    // result.longUrl contains the long url.\n  });\n});\n~~~~\n\nAlternatively, you may need to send an API key with the\nrequest you are going to make. The following creates and executes a request from the Google+ API service to retrieve a person profile given a userId:\n\n~~~~ js\ngoogleapis\n    .discover('plus', 'v1')\n    .execute(function(err, client) {\n  // handle discovery errors\n  var getUserAuthdReq = client.plus.people.get({ userId: '+burcudogan' })\n      .withApiKey(API_KEY);\n\n  getUserAuthdReq.execute(function(err, user) {\n    console.log(\"Result: \" + (err ? err.message : user.displayName));\n  });\n});\n~~~~\n\nTo learn more about API keys, please see the [documentation](https://developers.google.com/console/help/#UsingKeys).\n\n#### Making Authenticated Requests\n\nAnd you can start using oauth2Client to authorize and authenticate your\nrequests to Google APIs with the retrieved tokens. If you provide a\nrefresh_token, the access_token is automatically refreshed and the request is replayed in\ncase the access_token has expired.\n\nFollowing sample retrieves Google+ profile of the authenticated user.\n\n~~~~ js\nvar oauth2Client =\n    new OAuth2(CLIENT_ID, CLIENT_SECRET, REDIRECT_URL);\n\n// Retrieve tokens via token exchange explaind above.\n// Or you can set them.\noauth2Client.credentials = {\n  access_token: 'ACCESS TOKEN HERE',\n  refresh_token: 'REFRESH TOKEN HERE'\n};\n\nclient\n    .plus.people.get({ userId: 'me' })\n    .withAuthClient(oauth2Client)\n    .execute(callback);\n~~~~\n\n### Batch requests (experimental)\n\nYou can combine multiple requests in a single one by using batch requests.\n\n~~~~ js\nvar getUserReq =\n    client.plus.people.get({ userId: '+BurcuDogan' });\n\nvar insertUrlReq =\n    client.urlshortener.url.insert({ longUrl: 'http://google.com' });\n\nclient\n    .newBatchRequest()\n    .add(getUserReq)\n    .add(insertUrlReq)\n    .execute(function(err, results) {\n  // handle results\n});\n~~~~\n\n### Media Uploads\n\nClient supports basic and multipart media uploads. For creation and modification requests\nwith media attachments, take a look at the `examples/mediaupload.js` sample.\n\n~~~~ js\nclient\n    .drive.files.insert({ title: 'Test', mimeType: 'text/plain' })\n    .withMedia('text/plain', 'Hello World')\n    .execute();\n~~~~\n\n## License\n\n`google-api-nodejs-client` is licensed with Apache 2.0. Full license text is\navailable on COPYING file.\n\n## Contributing\n\nSee [CONTRIBUTING](https://github.com/google/google-api-nodejs-client/tree/master/CONTRIBUTING.md).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/google/google-api-nodejs-client/issues"
  },
  "homepage": "https://github.com/google/google-api-nodejs-client",
  "_id": "googleapis@0.8.0",
  "_shasum": "b7bdf177ee839f1bab5cf5e65cb4d0d74f27a86b",
  "_from": "googleapis@",
  "_resolved": "https://registry.npmjs.org/googleapis/-/googleapis-0.8.0.tgz"
}
